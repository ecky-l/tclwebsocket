name: tclwebsocket

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - name: Install tcl-dev and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install tcl-dev tcllib tcl-thread fossil
      - name: Get tclhttpd for tests
        run: |
          mkdir tclhttpd && cd tclhttpd
          fossil clone https://core.tcl-lang.org/tclhttpd tclhttpd.fossil
          fossil open tclhttpd.fossil
          cd -
      - uses: actions/checkout@v2
      - name: submodules-init
        uses: snickerbockers/submodules-init@v4

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        env:
          TCLHTTPD_HOME: github.workspace}}/tclhttpd
        run: ctest -C ${{env.BUILD_TYPE}} --verbose
      
